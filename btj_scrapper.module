<?php
/**
 * @file
 * Main module hooks implementation.
 */

use Drupal\Core\Url;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function btj_scrapper_group_view_alter(array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display) {
  if (!empty($build['field_scrap_libraries'])) {
    foreach (Element::children($build['field_scrap_libraries']) as $key) {
      $url = Url::fromUserInput("/scrap/" . $entity->id() . '/library');
      $build['field_scrap_libraries'][$key]['#url'] = $url;
    }
  }
  if (!empty($build['field_scrap_events'])) {
    foreach (Element::children($build['field_scrap_events']) as $key) {
      $url = Url::fromUserInput("/scrap/" . $entity->id() . '/event');
      $build['field_scrap_events'][$key]['#url'] = $url;
    }
  }
  if (!empty($build['field_scrap_news'])) {
    foreach (Element::children($build['field_scrap_events']) as $key) {
      $url = Url::fromUserInput("/scrap/" . $entity->id() . '/news');
      $build['field_scrap_news'][$key]['#url'] = $url;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function btj_scrapper_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_ding_event_form', 'node_ding_news_form', 'node_ding_library_form'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'btj_node_add_form_submit';
      }
    }
  }
}

/**
 * Add municipality reference to node field on save.
 */
function btj_node_add_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $nid = $form_state->get('nid');
  if (empty($nid)) {
    return;
  }

  // TODO: This should be refactored towards a form_validate routine.
  // So no value is forced unless the user explicitly sets one, or the default
  // is used.
  $account = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $municipality = $account->get('field_municipality_ref')
    ->first()
    ->get('entity')
    ->getTargetIdentifier();

  if (!$municipality) {
    \Drupal::messenger()->addMessage(t('You don\'t have any municipality ownership assigned. Please contact site administrator.', MessengerInterface::TYPE_WARNING));
  }
  $node = \Drupal\node\Entity\Node::load($nid);
  $node->set('field_municipality', $municipality);

  // TODO: This should be refactored to a form_alter routine.
  // So the field is pre-populated with a municipality value.
  // Currently, this invokes an unnecessary update request towards mobilesearch
  // since mobilesearch module track entity update hooks to perform storage update.
  // Looks like an action "made in the dark" - i.e. the node is manipulated
  // during save, without any knowledge to the user. This invalidates the fact
  // that a user can assign a different municipality manually.
  $node->save();
}


/**
 * Implements hook_entity_delete().
 */
function btj_scrapper_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  \Drupal::database()
    ->delete('btj_scrapper_nodes')
    ->condition('bundle', $entity->bundle())
    ->condition('entity_id', $entity->id())
    ->execute();
}
